<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List 
		java.util.ArrayList 
    	java.util.Map		
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	IConnection conn = null;
	List<? extends IConnection> inConns = NodeUtil.getIncomingConnections(node, IConnectionCategory.DATA);
	if (inConns.size() > 0) {
		conn = inConns.get(0);
	}
	List<IMetadataColumn> listColumns = new ArrayList<IMetadataColumn>(); // dummy
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		listColumns = metadata.getListColumns();
		}
	}
	@SuppressWarnings("unchecked")	
	List<Map<String, String>> configList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__COLUMN_CONFIG__");
	String className = ElementParameterParser.getValue(node, "__CLASS_NAME__");
	boolean isRoot = "true".equals(ElementParameterParser.getValue(node, "__IS_ROOT__"));
	boolean autoRelations = "true".equals(ElementParameterParser.getValue(node, "__AUTOMATIC_PARENT_CHILD_RELATIONS__"));
	String parentObject = ElementParameterParser.getValue(node, "__PARENT_OBJECT_COMPONENT__");
	String parentKeyField = ElementParameterParser.getValue(node, "__PARENT_KEY_COLUMN__");
	boolean createObjectAtBegin = "true".equals(ElementParameterParser.getValue(node, "__CREATE_OBJECT_ONCE__"));
    boolean log4jEnabled = "true".equals(org.talend.core.model.process.ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__")) && 
   							"JOBLET".equals(node.getComponent().getComponentType().toString()) == false;
%>
<%	if (createObjectAtBegin == false && isRoot == false) { %>
	try {
		// now create the new object
		de.cimt.talendcomp.xmldynamic.TXMLObject currentObject = (de.cimt.talendcomp.xmldynamic.TXMLObject) de.cimt.talendcomp.xmldynamic.Util.createTXMLObject(<%=className%>);
		globalMap.put("<%=cid%>_CURRENT_OBJECT", currentObject);
	} catch (Exception e) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", "Instantiation of object " + <%=className%> + " failed: " + e.getMessage());
		throw e;
	}
<%	} // if (createObjectAtBegin == false && isRoot == false) %>
	try {
		// get back the current object
		de.cimt.talendcomp.xmldynamic.TXMLObject currentObject = (de.cimt.talendcomp.xmldynamic.TXMLObject) globalMap.get("<%=cid%>_CURRENT_OBJECT");
		Integer <%=cid%>_numberObjects = (Integer) globalMap.get("<%=cid%>_NB_LINE");
		if (<%=cid%>_numberObjects == null) {
			<%=cid%>_numberObjects = 0;
		}
		globalMap.put("<%=cid%>_NB_LINE", <%=cid%>_numberObjects + 1);
		// fill the attributes
<%	String keyFieldName = null;
	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		if (mc.isKey()) {
			keyFieldName = mc.getLabel();
		}
		Map<String, String> config = configList.get(i);
		boolean use = "true".equals(config.get("USE"));
		if (use == false) {
			continue; // skip over unused columns
		}
		String fieldName = config.get("ATTRIBUTE_ALIAS");
		boolean ignoreMissing = "true".equals(config.get("IGNORE_MISSING"));
		if (fieldName == null || fieldName.trim().isEmpty() || fieldName.equals("\"\"")) {
			fieldName = "\"" + mc.getLabel() + "\"";
		} %>
		if (currentObject.addOrSet(<%=fieldName%>, <%=conn.getName()%>.<%=mc.getLabel()%>) == false) {
<%		if (ignoreMissing == false) { %>
			throw new Exception("Attribute: <%=className.replace("\"","")%>.<%=fieldName.replace("\"","")%> does not exist!");
<%		} else { %>
			// we ignore the fact the attribute does not exists
<%		} // if (ignoreMissing == false) %>
		}
<%	} // for (int i = 0; i < listColumns.size(); i++)
	if (keyFieldName == null) { %>
		// No key field defined !
<%	} else { %> 
		keyMap_<%=cid%>.put(<%=conn.getName()%>.<%=keyFieldName%>, currentObject);
<%	}
	if (isRoot == false) {
   		INode parentNode = NodeUtil.getNodeByUniqueName(node.getProcess(), parentObject);
   		boolean parentIsRoot = "true".equals(ElementParameterParser.getValue(parentNode, "__IS_ROOT__"));
   		if (autoRelations == false || parentIsRoot) {
			if (createObjectAtBegin == false) { %>
   		// add current object to parent if we do run this flow per parent object (iteration)
		// but we only can do this if the current object was not created right at the beginning 
		// otherwise the assignment to the parent will be done in the end part
		String parentObjectCompentName = "<%=parentObject%>";
		de.cimt.talendcomp.xmldynamic.TXMLObject parentObject = (de.cimt.talendcomp.xmldynamic.TXMLObject) globalMap.get(parentObjectCompentName + "_CURRENT_OBJECT");
		if (parentObject == null) {
			throw new Exception("Parent object: " + parentObjectCompentName + " does not exist!");
		}
		if (parentObject.addOrSet(currentObject) == false) {
			throw new Exception("Cannot add this child object to the parent: " + parentObject.getClass().getName() + " because there is no matching member!");
		}
<%			} // if (createObjectAtBegin == false)
	 	} else { // if (autoRelations == false || parentIsRoot) %>
	 	// if we create per flow record a new current object, we have to collect the objects per parent object
		if (foreignKeyMap_<%=cid%>.containsKey(<%=conn.getName()%>.<%=parentKeyField%>) == false) {
			foreignKeyMap_<%=cid%>.put(<%=conn.getName()%>.<%=parentKeyField%>, new java.util.ArrayList<de.cimt.talendcomp.xmldynamic.TXMLObject>());
		}
		java.util.List<de.cimt.talendcomp.xmldynamic.TXMLObject> listObjectsForParent = (java.util.List<de.cimt.talendcomp.xmldynamic.TXMLObject>) foreignKeyMap_<%=cid%>.get(<%=conn.getName()%>.<%=parentKeyField%>);
		listObjectsForParent.add(currentObject);
<% 		} // if (autoRelations == false || parentIsRoot)
 	} // if (isRoot == false) %>
	} catch (Throwable e) {
		String message = "Set values failed: " + e.getMessage();
<%	if (log4jEnabled) { %>
		LOG.log( Level.SEVERE, currentComponent + ": " + message, e);
<%	} %>
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}