<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
      org.talend.core.model.utils.NodeUtil
		java.util.List
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String parentObject = ElementParameterParser.getValue(node, "__PARENT_OBJECT_COMPONENT__");
	String file = ElementParameterParser.getValue(node, "__OUTPUT_FILE_PATH__");
	boolean outputAsfile = "true".equals(ElementParameterParser.getValue(node, "__OUTPUT_AS_FILE__"));
	boolean prettyPrint = "true".equals(ElementParameterParser.getValue(node, "__PRETTY_PRINT__"));
	boolean fragmented = "true".equals(ElementParameterParser.getValue(node, "__FRAGMENTED__"));
	boolean debugOutput = "true".equals(ElementParameterParser.getValue(node, "__STD_OUTPUT__"));
	String outputColumn = ElementParameterParser.getValue(node, "__XML_OUTPUT_COLUMN__"); 
	String encoding = ElementParameterParser.getValue(node, "__ENCODING__"); 
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	String outgoingConnName = null;
	if (outConns != null && outConns.isEmpty() == false) {
		IConnection outConn = outConns.get(0);
		outgoingConnName = outConn.getName();
	}
    boolean log4jEnabled = "true".equals(org.talend.core.model.process.ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__")) && 
   							"JOBLET".equals(node.getComponent().getComponentType().toString()) == false;
%>
	jakarta.xml.bind.Marshaller <%=cid%>_marshaller = null;
	Object object_<%=cid%> = null;
	try {
		String parentObjectCompentName = "<%=parentObject%>";
		object_<%=cid%> = globalMap.get(parentObjectCompentName + "_CURRENT_OBJECT");
		if (object_<%=cid%> == null) {
			throw new Exception("Parent object: " + parentObjectCompentName + " does not exist!");
		}
		String packageName = object_<%=cid%>.getClass().getPackage().getName();
		jakarta.xml.bind.JAXBContext jaxbContext = de.cimt.talendcomp.xmldynamic.Util.createJAXBContext();
		<%=cid%>_marshaller = jaxbContext.createMarshaller();
<%	if (prettyPrint) { %>
		<%=cid%>_marshaller.setProperty(jakarta.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, true);
<%	} %>
<%	if (fragmented) { %>
		<%=cid%>_marshaller.setProperty(jakarta.xml.bind.Marshaller.JAXB_FRAGMENT, true);
<%	} %>
<%	if (encoding != null && encoding.trim().isEmpty() == false) { %>
		<%=cid%>_marshaller.setProperty(jakarta.xml.bind.Marshaller.JAXB_ENCODING, <%=encoding%>);
<%	} %>
<%	if (outputAsfile) { %>
		String filePath = <%=file%>;
		java.io.File file = new java.io.File(filePath);
		java.io.File dir = file.getParentFile();
		if (dir.exists() == false) {
			dir.mkdirs();
		}
		if (dir.exists() == false) {
			throw new Exception("Cannot create dir: " + dir.getAbsolutePath());
		}
		<%=cid%>_marshaller.marshal(object_<%=cid%>, file);
		globalMap.put("<%=cid%>_OUTPUT_FILE_PATH", filePath);
<%	} %>
	} catch (Throwable e) {
		String message = "Marshall object into file failed: " + e.getMessage();
<%	if (log4jEnabled) { %>
		log.error(currentComponent + ": " + message, e);
<%	} %>
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
<%	if (debugOutput || (outgoingConnName != null && outputColumn != null)) { %>
	String xmlString_<%=cid%> = null;
	try {
		java.io.StringWriter sw = new java.io.StringWriter();
		<%=cid%>_marshaller.marshal(object_<%=cid%>, sw);
		xmlString_<%=cid%> = sw.toString();
<% 		if (debugOutput) { %>
   		System.out.println(xmlString_<%=cid%>);
<% 		} %>
	} catch (Exception e) {
		String message = "Marshall object for schema or sysout failed: " + e.getMessage();
<%		if (log4jEnabled) { %>
		log.error(currentComponent + ": " + message, e);
<%		} %>
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
<% 		if (outgoingConnName != null && outputColumn != null && outputColumn.isEmpty() == false) { %>
	if (true) { // open a dummy loop for one row
		<%=outgoingConnName%>.<%=outputColumn%> = xmlString_<%=cid%>;
<%		} %>
<%	} %>
	